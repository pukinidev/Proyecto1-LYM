/*

-----------------------------------------------------------------------------------------------------

Valeria Caro Ramirez - v.caro@uniandes.edu.co - 202111040
Sofia Velasquez Marin - s.velasquezm2@uniandes.edu.co - 202113334

En nuestro interprete, solo estan funcionando las instrucciones!
Tenga un buen dia!

-----------------------------------------------------------------------------------------------------

 **/

options
{
  LOOKAHEAD= 1;

  IGNORE_CASE = true;
  STATIC = false;
  FORCE_LA_CHECK = true; /* Toca setear esto en true porque sino el LOOKAHEAD = 2 manda warning */
}

PARSER_BEGIN(Robot)
package uniandes.lym.robot.control;
import uniandes.lym.robot.kernel.*;
import java.awt.Point;
import java.io.*;
import java.util.*;
@ SuppressWarnings("serial") 
public class Robot
{
  /* HASHMAP */
  Map < String, Integer > variables = new HashMap < String, Integer > ();
  Map < String, Integer > directions = Map.of(":right", 1, ":around", 2, ":left", - 1);
  Map < String, Integer > dire = Map.of(":right", 1, ":left", - 1, ":front", 0, ":back", 2);
  Map < String, Integer > orientations = Map.of(":north", 0, ":east", 1, ":south", 2, ":west", 3);
  Map < Integer, Integer > turns = Map.of(0, 0, 1, 2, 2, 1, 3, 3);


  private RobotWorldDec world;

  void setWorld(RobotWorld w)
  {
    world = (RobotWorldDec) w;	
  }
  String salida = new String();
}

PARSER_END(Robot)

SKIP :
{
  " "
| 	"\r"
| 	"\t"
  //	| "\n"
}

TOKEN : /* SEPARATORS */
{
  < LPAREN : "(" >
| < RPAREN : ")" >
}

TOKEN : /* COMMANDS */
{
  < DEFVAR : "defvar" >
| < MOVE : "move" >
| < PUT : "put" >
| < PICK : "pick" >
| < TURN : "turn" >
| < FACE : "face" >
| < MOVE_DIR : "move-dir" >
| < RUN_DIRS : "run-dirs" >
| < MOVE_FACE : "move-face" >
| < SK : "skip" >
}

TOKEN : /* CONTROL STRUCTURES */
{
  < IF : "if" >
| < LOOP : "loop" >
| < REPEAT : "repeat" >
| < DEFUN : "defun" >
}

TOKEN : /* CONDITIONALS */
{
  < FACING_P : "facing-p" >
| < CPU : "can-put-p" >
| < CPI : "can-pick-p" >
| < CM : "can-move-p" >
| < NOT : "not" >
}

TOKEN : /*CONSTANTS*/
{
  < BALLOONS : ":balloons" >
| < CHIPS : ":chips" >
}

TOKEN :
{
  < NUMERO : (< DIGIT >)+ >
| < #DIGIT : [ "0"-"9" ] >
| < #ALPHABET : [ "a"-"z" ] >
| < CONSTANT : ":" (< ALPHABET >)+ >
| < WORD : (< ALPHABET >)+ >
}

// (turn :right) (move 2) (move 3)
boolean command(StringBuffer sistema) :
{	
  salida = new String();
}
{
  < LPAREN >
  (
    < MOVE > move()
  | < TURN > turn()
  | < PUT > putItem()							
  | < PICK > pickItem()
  | < DEFVAR > variable()
  | assing()
  | < MOVE_FACE > moveface()
  | < FACE > face()
  | conditions()
  | < MOVE_DIR > movedir()
  | < RUN_DIRS > rundirs()
  | < SK >
  | < NOT > <LPAREN> not() <LPAREN>
  )
  < RPAREN >
  {
    sistema.append(salida);
    return true;
  }
| "\n"
  {
    return true;
  }
| < EOF >
  {
    return false;
  }
}


// COMANDS
void putItem() :
{
  int f = 1;
  String v;	
}
{
  (
    < CHIPS >
    (
      f = numero()
      {
        world.putChips(f);
      }
    | 
      v = var()
      {
        world.putChips(variables.get(v));
      }
    )
  )
|
  (
    < BALLOONS >
    (
      f = numero()
      {
        world.putBalloons(f);
      }
    | v = var()
      {
        world.putBalloons(variables.get(v));
      }
    )
  )
}

void pickItem() :
{
  int f = 1;
  String v;	
}
{
  (
    < CHIPS >
    (
      f = numero()
      {
        world.pickChips(f);
      }
    | 
      v = var()
      {
        world.pickChips(variables.get(v));
      }
    )
  )
|
  (
    < BALLOONS >
    (
      f = numero()
      {
        world.grabBalloons(f);
      }
    | v = var()
      {
        world.grabBalloons(variables.get(v));
      }
    )
  )
}

void move() :
{
  int x = 1;
  String v;
}
{
  (
    x = numero()
    {
      world.moveForward(x);
      salida = "Command: Moveforward ";
    }
  | v = var()
    {
      world.moveForward(variables.get(v));
    }
  )
}

void turn() :
{
  String c;
}
{
  c = constant()
  {
    if (directions.containsKey(c))
    {
      int giros = directions.get(c);
      int giro = 1;
      if (giros < 0)
      {
        giro = Math.floorMod(giros, 4);
      }
      else if (giros > 1)
      {
        giro = giros;
      }
      for (int i = 1; i <= giro; i++)
      {
        world.turnRight();
      }
      salida = "The robot has turned " + c;
    }
    else
    {
      throw new Error("The direction doesn't exist");
    }
  }
}

void movedir() :
{
  String d;
  String v;
  int n = 1;
}
{
  (
    (
      n = numero() d = constant()
      {
        if (dire.containsKey(d))
        {
          int giros = dire.get(d);
          if (giros < 0)
          {
            for (int i = 1; i <= Math.floorMod(giros, 4); i++)
            {
              world.turnRight();
            }
            world.moveForward(n);
          }
          else if (giros > 1)
          {
            for (int i = 1; i <= giros; i++)
            {
              world.turnRight();
            }
            world.moveForward(n);
          }
          else if (giros == 0)
          {
            world.moveForward(n);
          }
          else if (giros == 1)
          {
            world.turnRight();
            world.moveForward(n);
          }
          salida = "The robot has turned " + d;
        }
        else
        {
          throw new Error("The direction doesn't exist");
        }
        switch (d)
        {
          case ":back" : 
          for (int i = 1; i <= 2; i++)
          {
            world.turnRight();
          }
          break;
          case ":front" : 
          salida = "Quedate quieto wey";
          break;
          case ":right" : 
          for (int i = 1; i <= 3; i++)
          {
            world.turnRight();
          }
          break;
          case ":left" : 
          for (int i = 1; i <= 1; i++)
          {
            world.turnRight();
          }
          break;
        }
      }
    )
  | v = var() d = constant()
    {
      if (dire.containsKey(d))
      {
        int giros = dire.get(d);
        if (giros < 0)
        {
          for (int i = 1; i <= Math.floorMod(giros, 4); i++)
          {
            world.turnRight();
          }
          world.moveForward(variables.get(v));
        }
        else if (giros > 1)
        {
          for (int i = 1; i <= giros; i++)
          {
            world.turnRight();
          }
          world.moveForward(variables.get(v));
        }
        else if (giros == 0)
        {
          world.moveForward(variables.get(v));
        }
        else if (giros == 1)
        {
          world.turnRight();
          world.moveForward(variables.get(v));
        }
        salida = "The robot has turned " + d;
      }
      else
      {
        throw new Error("The direction doesn't exist");
      }
      switch (d)
      {
        case ":back" : 
        for (int i = 1; i <= 2; i++)
        {
          world.turnRight();
        }
        break;
        case ":front" : 
        salida = "Quedate quieto wey";
        break;
        case ":right" : 
        for (int i = 1; i <= 3; i++)
        {
          world.turnRight();
        }
        break;
        case ":left" : 
        for (int i = 1; i <= 1; i++)
        {
          world.turnRight();
        }
        break;
      }
    }
  )
}

void rundirs() :
{
  String o;
  ArrayList < String > ldire = new ArrayList < String > ();
}
{
  (
    o = constant()
    {
      ldire.add(o);
    }
  )+
  {
    int inicio = world.getFacing();
    int llegada = 0;
    for (String key : ldire)
    {
      if (dire.containsKey(key))
      {
        int giros = dire.get(key);
        if (giros < 0)
        {
          for (int i = 1; i <= Math.floorMod(giros, 4); i++)
          {
            world.turnRight();
          }
          world.moveForward(1);
        }
        else if (giros > 1)
        {
          for (int i = 1; i <= giros; i++)
          {
            world.turnRight();
          }
          world.moveForward(1);
        }
        else if (giros == 0)
        {
          world.moveForward(1);
        }
        else if (giros == 1)
        {
          world.turnRight();
          world.moveForward(1);
        }
        else
        {
          throw new Error("The direction doesn't exist");
        }
      }
    }
    llegada = turns.get(world.getFacing());
    inicio = turns.get(inicio);
    int nuevaOrientacion = inicio - llegada;
    int giros = Math.floorMod(nuevaOrientacion, 4);
    for (int i = 1; i <= giros; i++)
    {
      world.turnRight();
    }
    System.out.println("giros" + giros);
  }
}

Map < String, Integer > variable() :
{
  String name;
  int n = 1;
}
{
  (
    name = var() n = numero()
    {
      if (variables.containsKey(name))
      {
        salida = "The variable alredy exists, use assing instead!";
      }
      else
      {
        variables.put(name, n);
      }
      return variables;
    }
  )
}

void assing() :
{
  String name;
  int n;
}
{
  "=" name = var() n = numero()
  {
    if (variables.containsKey(name))
    {
      variables.replace(name, n);
      salida = "The value of " + name + " has been changed!";
      for (String key : variables.keySet())
      {
        System.out.println("Key: " + key + " Value: " + variables.get(key) + "\n");
      }
    }
    else
    {
      salida = "There is no a variable with such name!";
    }
  }
}

void face() :
{
  String o;
  String v;
  int x = 1;
}
{
  (
    o = constant()
    {
      int inicio = world.getFacing();
      inicio = turns.get(inicio);
      int llegada = orientations.get(o);
      int nuevaOrientacion = llegada - inicio;
      int giros = Math.floorMod(nuevaOrientacion, 4);
      for (int i = 1; i <= giros; i++)
      {
        world.turnRight();
      }
    }
  )
}

void moveface() :
{
  String o;
  String v;
  int x = 1;
}
{
  (
    x = numero() o = constant()
    {
      int inicio = world.getFacing();
      inicio = turns.get(inicio);
      int llegada = orientations.get(o);
      int nuevaOrientacion = llegada - inicio;
      int giros = Math.floorMod(nuevaOrientacion, 4);
      for (int i = 1; i <= giros; i++)
      {
        world.turnRight();
      }
      world.moveForward(x);
    }
  )
|
  (
    v = var() o = constant()
    {
      int inicio1 = world.getFacing();
      inicio1 = turns.get(inicio1);
      int llegada1 = orientations.get(o);
      int nuevaOrientacion1 = llegada1 - inicio1;
      int giros1 = Math.floorMod(nuevaOrientacion1, 4);
      for (int i = 1; i <= giros1; i++)
      {
        world.turnRight();
      }
      world.moveForward(variables.get(v));
    }
  )
}

boolean conditions() :
{
  String o;
  String v;
  int n = 1;
}
{
  (
    < FACING_P > o = constant()
    {
      if (orientations.containsKey(o))
      {
        switch (o)
        {
          case ":north" : 
          return world.facingNorth();
          case ":south" : 
          return world.facingSouth();
          case ":east" : 
          return world.facingEast();
          case "west" : 
          return world.facingWest();
        }
      }
    }
  )
|
  (
    < CM > o = constant()
    {
      Point actualPosition = world.getPosition().getLocation();
      int size = world.getN();
      int newx = 1;
      switch (o)
      {
        case ":north" : 
        actualPosition.translate(0, - 1);
        
        newx = actualPosition.y;
        if (newx > size
      | newx < 1)
        {
          
          return false;
        }
        else
        {
          
          return !world.isBlocked(actualPosition);
        }
        case ":south" : 
        actualPosition.translate(0, 1);
        
        newx = actualPosition.y;
        if (newx > size
      | newx < 1)
        {
          
          return false;
        }
        else
        {
          
          return !world.isBlocked(actualPosition);
        }
        case ":east" : 
        actualPosition.translate(1, 0);
        
        newx = actualPosition.x;
        if (newx > size
      | newx < 1)
        {
          
          return false;
        }
        else
        {
          
          return !world.isBlocked(actualPosition);
        }
        case ":west" : 
        actualPosition.translate(- 1, 0);
        
        newx = actualPosition.x;
        if (newx > size
      | newx < 1)
        {
          
          return false;
        }
        else
        {
          
          return !world.isBlocked(actualPosition);
        }
      }
    }
  )
}

// TOKENIZER 
/**
	 *  reconoce un numero entero sin signo
	 * @return el valor entero correspondiente al valor reconocido
	 */



JAVACODE 
boolean not()
{
  return !conditions();
}

int numero() throws Error :
{	
  int total = 1;
}
{
  < NUMERO >
  {
    try
    {
      total = Integer.parseInt(token.image);
    }
    catch (NumberFormatException ee)
    {
      // Dada la forma de NUMERO, sabemos que solo puede tener d�gitos
      // Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
      throw new Error("Number out of bounds: " + token.image + "!!");
    }
    return total;
  }
}

/**
	 * reconoce una constante
	 * @return el valor string correspondiente al valor reconocido
	 */


String constant() throws Error :
{
  Token token;
}
{
  (token = < CONSTANT >)
  {
    return token.image;
  }
}

/**
	 * reconoce una variable
	 * @return el valor string correspondiente al valor reconocido
	 */

String var() throws Error :
{
  Token token;
}
{
  (token = < WORD >)
  {
    return token.image;
  }
}
