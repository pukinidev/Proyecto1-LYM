/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi
Eliminadas producciones para manejar globos
Agregado el esqueleto para la traduccion
Modificado por Silvia Takahashi 
Re: Agregar Reglas para el manejo de globos
Modificado por Saulo Daza y Sonia Vivas
Modificado por Silvia Takahashi
Eliminadas reglas de traducci�n DE  MARCROS
Cambio del lenguaje de comandos
Modificado por Silvia Takahashi: algunas Reglas para traduccion
Modificado por Silvia Takahashi: Cambio en el lenguaje
Abril: 2008 - Simplificado apra solo interpretaci�n
 **/

options 
{
	LOOKAHEAD=2; 
	IGNORE_CASE=true; 
	STATIC = false;
	FORCE_LA_CHECK = true; /* Toca setear esto en true porque sino el LOOKAHEAD = 2 manda warning */
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;

@SuppressWarnings("serial")
public class Robot 
{


	private RobotWorldDec world;
	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String salida=new String();
}
PARSER_END(Robot)

SKIP:
{
	" "
	|	"\r"
	|	"\t"
//	| "\n"
}

TOKEN: /* SEPARATORS */
{
	  <LPAREN: "(" >
	 |<RPAREN: ")" >
	 
}

TOKEN: /* COMMANDS */
{

			<MOVE:  "move">
		| 	<PUT: "put">
		| 	<PICK: "pick">
		|   <TURN: "turn" >
		|   <FACE: "face" >
		|   <MOVE_DIR: "move_dir">
		|   <RUN_DIRS: "run_dirs">
		|   <MOVE_FACE: "move_face" >
		|   <SK: "skip" >
		
}


TOKEN :
{
		<BALLOONS:  ":balloons" >
		|<CHIPS:     ":chips"  >	

}


TOKEN :
{
		<NUMERO: (<DIGIT>)+ >
		|  	<#DIGIT: ["0"-"9"] >
}


	boolean command(StringBuffer sistema) :
	{	
		
		int x;
		salida=new String();
		
	}
	
	{
		(
		  
		   <LPAREN> <MOVE> move() <RPAREN> 
		|  <LPAREN> <PUT> put() <RPAREN> 					  			
		|  <LPAREN> <PICK> pick() <RPAREN> 
		) "\n" 

		{
		  //  try {
	    	//		 Thread.sleep(1);
	    	  //   } catch (InterruptedException e) {
	    		//	        System.err.format("IOException: %s%n", e);
	    		//	    }
	    			 
			sistema.append(salida);
			return true;
		}

     |  "\n" { return true; }

		| <EOF> {return false;} 
	}

	void put() :
	{
		int f=1;	
	}
	{
		( <CHIPS>   f=numero() {world.putChips(f); salida = "Command:  Put Chips"; })
		|  	  ( <BALLOONS>   f=numero() {world.putBalloons(f); salida = "Command:  Put Balloons";})	 

	}

	void pick() :
	{
		int f=1;	
	}
	{
		( <CHIPS>    f=numero() {world.pickChips(f);salida = "Command:  Pick chips";})
		|  	  ( <BALLOONS>    f=numero() {world.grabBalloons(f);salida="Command:  Pick balloons";})	 

	}

    void move():
    {
      int x=1;
    }
    {
      ( x=numero() {world.moveForward(x);salida = "Command: Moveforward ";})
    }
	
	

	/**
	 *  reconoce un numero entero sin signo
	 * @return el valor entero correspondiente al valor reconocido
	 */

	int numero() throws Error:
	{	
		int total=1;
	}
	{
		<NUMERO>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				// Dada la forma de NUMERO, sabemos que solo puede tener d�gitos
				// Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
				throw new Error("Number out of bounds: "+token.image+"!!");
			}
			return total;
		}
	}

	