/* Generated By:JavaCC: Do not edit this line. RobotConstants.java */
package uniandes.lym.robot.control;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface RobotConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int LPAREN = 4;
  /** RegularExpression Id. */
  int RPAREN = 5;
  /** RegularExpression Id. */
  int DEFVAR = 6;
  /** RegularExpression Id. */
  int MOVE = 7;
  /** RegularExpression Id. */
  int PUT = 8;
  /** RegularExpression Id. */
  int PICK = 9;
  /** RegularExpression Id. */
  int TURN = 10;
  /** RegularExpression Id. */
  int FACE = 11;
  /** RegularExpression Id. */
  int MOVE_DIR = 12;
  /** RegularExpression Id. */
  int RUN_DIRS = 13;
  /** RegularExpression Id. */
  int MOVE_FACE = 14;
  /** RegularExpression Id. */
  int SEARCH = 15;
  /** RegularExpression Id. */
  int SK = 16;
  /** RegularExpression Id. */
  int IF = 17;
  /** RegularExpression Id. */
  int LOOP = 18;
  /** RegularExpression Id. */
  int REPEAT = 19;
  /** RegularExpression Id. */
  int DEFUN = 20;
  /** RegularExpression Id. */
  int FACING_P = 21;
  /** RegularExpression Id. */
  int CPU = 22;
  /** RegularExpression Id. */
  int CPI = 23;
  /** RegularExpression Id. */
  int CM = 24;
  /** RegularExpression Id. */
  int NOT = 25;
  /** RegularExpression Id. */
  int BALLOONS = 26;
  /** RegularExpression Id. */
  int CHIPS = 27;
  /** RegularExpression Id. */
  int NUMERO = 28;
  /** RegularExpression Id. */
  int DIGIT = 29;
  /** RegularExpression Id. */
  int ALPHABET = 30;
  /** RegularExpression Id. */
  int CONSTANT = 31;
  /** RegularExpression Id. */
  int WORD = 32;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"(\"",
    "\")\"",
    "\"defvar\"",
    "\"move\"",
    "\"put\"",
    "\"pick\"",
    "\"turn\"",
    "\"face\"",
    "\"move_dir\"",
    "\"run_dirs\"",
    "\"move-face\"",
    "\"search\"",
    "\"skip\"",
    "\"if\"",
    "\"loop\"",
    "\"repeat\"",
    "\"defun\"",
    "\"facing-p\"",
    "\"can-put-p\"",
    "\"can-pick-p\"",
    "\"can-move-p\"",
    "\"not\"",
    "\":balloons\"",
    "\":chips\"",
    "<NUMERO>",
    "<DIGIT>",
    "<ALPHABET>",
    "<CONSTANT>",
    "<WORD>",
    "\"\\n\"",
    "\"=\"",
  };

}
