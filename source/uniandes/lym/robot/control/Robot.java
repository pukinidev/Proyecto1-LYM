/* Generated By:JavaCC: Do not edit this line. Robot.java */
package uniandes.lym.robot.control;
import uniandes.lym.robot.kernel.*;
import java.awt.Point;
import java.io.*;
import java.util.*;
@ SuppressWarnings("serial")
public class Robot implements RobotConstants {
  /* HASHMAP */
  Map < String, Integer > variables = new HashMap < String, Integer > ();
  Map < String, Integer > directions = Map.of(":right", 1, ":around", 2, ":left", - 1);
  Map < String, Integer > dire = Map.of(":right", 1, ":left", - 1, ":front", 0, ":back", 2);
  Map < String, Integer > orientations = Map.of(":north", 0, ":east", 1, ":south", 2, ":west", 3);
  Map < Integer, Integer > turns = Map.of(0, 0, 1, 2, 2, 1, 3, 3);

  private RobotWorldDec world;

  void setWorld(RobotWorld w)
  {
    world = (RobotWorldDec) w;
  }
  String salida = new String();

  final public boolean command(StringBuffer sistema) throws ParseException {
  salida = new String();
    if (jj_2_11(3)) {
      jj_consume_token(LPAREN);
      if (jj_2_1(3)) {
        jj_consume_token(MOVE);
        move();
      } else if (jj_2_2(3)) {
        jj_consume_token(TURN);
        turn();
      } else if (jj_2_3(3)) {
        jj_consume_token(PUT);
        putItem();
      } else if (jj_2_4(3)) {
        jj_consume_token(PICK);
        pickItem();
      } else if (jj_2_5(3)) {
        jj_consume_token(DEFVAR);
        variable();
      } else if (jj_2_6(3)) {
        assing();
      } else if (jj_2_7(3)) {
        jj_consume_token(MOVE_FACE);
        moveface();
      } else if (jj_2_8(3)) {
        jj_consume_token(FACE);
        face();
      } else if (jj_2_9(3)) {
        jj_consume_token(MOVE_DIR);
        movedir();
      } else if (jj_2_10(3)) {
        jj_consume_token(SK);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(RPAREN);
      jj_consume_token(32);
    sistema.append(salida);
    {if (true) return true;}
    } else if (jj_2_12(3)) {
      jj_consume_token(32);
    {if (true) return true;}
    } else if (jj_2_13(3)) {
      jj_consume_token(0);
    {if (true) return false;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// COMANDS
  final public void putItem() throws ParseException {
  int f = 1;
  String v;
    if (jj_2_18(3)) {
      jj_consume_token(CHIPS);
      if (jj_2_14(3)) {
        f = numero();
        world.putChips(f);
      } else if (jj_2_15(3)) {
        v = var();
        world.putChips(variables.get(v));
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else if (jj_2_19(3)) {
      jj_consume_token(BALLOONS);
      if (jj_2_16(3)) {
        f = numero();
        world.putBalloons(f);
      } else if (jj_2_17(3)) {
        v = var();
        world.putBalloons(variables.get(v));
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void pickItem() throws ParseException {
  int f = 1;
  String v;
    if (jj_2_24(3)) {
      jj_consume_token(CHIPS);
      if (jj_2_20(3)) {
        f = numero();
        world.pickChips(f);
      } else if (jj_2_21(3)) {
        v = var();
        world.pickChips(variables.get(v));
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else if (jj_2_25(3)) {
      jj_consume_token(BALLOONS);
      if (jj_2_22(3)) {
        f = numero();
        world.grabBalloons(f);
      } else if (jj_2_23(3)) {
        v = var();
        world.grabBalloons(variables.get(v));
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void move() throws ParseException {
  int x = 1;
  String v;
    if (jj_2_26(3)) {
      x = numero();
      world.moveForward(x);
      salida = "Command: Moveforward ";
    } else if (jj_2_27(3)) {
      v = var();
      world.moveForward(variables.get(v));
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void turn() throws ParseException {
  String c;
    c = constant();
      if (directions.containsKey(c))
      {
        int giros = directions.get(c);
        int giro = 1;
        if (giros < 0)
        {
          giro = Math.floorMod(giros, 4);
        }
        else if (giros > 1)
        {
          giro = giros;
        }
        for (int i = 1; i <= giro; i++)
        {
          world.turnRight();
        }
        salida = "The robot has turned " + c;
      }
      else
      {
        {if (true) throw new Error("The direction doesn't exist");}
      }
  }

  final public void movedir() throws ParseException {
  String d;
  int n = 1;
    n = numero();
    d = constant();
        int puki = world.getFacing();
        System.out.println("Posicion inicial: " + puki);
        if (dire.containsKey(d))
        {
          int giros = dire.get(d);
          if (giros < 0)
          {
            for (int i = 1; i <= Math.floorMod(giros, 4); i++)
            {
              world.turnRight();
            }
            world.moveForward(n);
          }
          else if (giros > 1)
          {
            for (int i = 1; i <= giros; i++)
            {
              world.turnRight();
            }
            world.moveForward(n);
          }
          else if (giros == 0)
          {
            world.moveForward(n);
          }
          else if (giros == 1)
          {
            world.turnRight();
            world.moveForward(n);
          }
          salida = "The robot has turned " + d;
        }
        else
        {
          {if (true) throw new Error("The direction doesn't exist");}
        }
        switch (d)
        {
          case ":back" :
          for (int i = 1; i <= 2; i++)
          {
            world.turnRight();
          }
          break;
          case ":front" :
          salida = "Quedate quieto wey";
          break;
          case ":right" :
          for (int i = 1; i <= 3; i++)
          {
            world.turnRight();
          }
          break;
          case ":left" :
          for (int i = 1; i <= 1; i++)
          {
            world.turnRight();
          }
          break;
        }
  }

  final public Map < String, Integer > variable() throws ParseException {
  String name;
  int n = 1;
    name = var();
    n = numero();
      if (variables.containsKey(name))
      {
        salida = "The variable alredy exists, use assing instead!";
      }
      else
      {
        variables.put(name, n);
      }
      {if (true) return variables;}
    throw new Error("Missing return statement in function");
  }

  final public void assing() throws ParseException {
  String name;
  int n;
    jj_consume_token(33);
    name = var();
    n = numero();
    if (variables.containsKey(name))
    {
      variables.replace(name, n);
      salida = "The value of " + name + " has been changed!";
      for (String key : variables.keySet())
      {
        System.out.println("Key: " + key + " Value: " + variables.get(key) + "\u005cn");
      }
    }
    else
    {
      salida = "There is no a variable with such name!";
    }
  }

  final public void face() throws ParseException {
  String o;
  String v;
  int x = 1;
    o = constant();
      int inicio = world.getFacing();
      inicio = turns.get(inicio);
      int llegada = orientations.get(o);
      int nuevaOrientacion = llegada - inicio;
      int giros = Math.floorMod(nuevaOrientacion, 4);
      for (int i = 1; i <= giros; i++)
      {
        world.turnRight();
      }
  }

  final public void moveface() throws ParseException {
  String o;
  String v;
  int x = 1;
    if (jj_2_28(3)) {
      x = numero();
      o = constant();
      int inicio = world.getFacing();
      inicio = turns.get(inicio);
      int llegada = orientations.get(o);
      int nuevaOrientacion = llegada - inicio;
      int giros = Math.floorMod(nuevaOrientacion, 4);
      for (int i = 1; i <= giros; i++)
      {
        world.turnRight();
      }
      world.moveForward(x);
    } else if (jj_2_29(3)) {
      v = var();
      o = constant();
      int inicio = world.getFacing();
      inicio = turns.get(inicio);
      int llegada = orientations.get(o);
      int nuevaOrientacion = llegada - inicio;
      int giros = Math.floorMod(nuevaOrientacion, 4);
      for (int i = 1; i <= giros; i++)
      {
        world.turnRight();
      }
      world.moveForward(variables.get(v));
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// TOKENIZER 
/**
	 *  reconoce un numero entero sin signo
	 * @return el valor entero correspondiente al valor reconocido
	 */
  final public int numero() throws ParseException, Error {
  int total = 1;
    jj_consume_token(NUMERO);
    try
    {
      total = Integer.parseInt(token.image);
    }
    catch (NumberFormatException ee)
    {
      // Dada la forma de NUMERO, sabemos que solo puede tener dï¿½gitos
      // Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
      {if (true) throw new Error("Number out of bounds: " + token.image + "!!");}
    }
    {if (true) return total;}
    throw new Error("Missing return statement in function");
  }

/**
	 * reconoce una constante
	 * @return el valor string correspondiente al valor reconocido
	 */
  final public String constant() throws ParseException, Error {
  Token token;
    label_1:
    while (true) {
      token = jj_consume_token(CONSTANT);
      if (jj_2_30(3)) {
        ;
      } else {
        break label_1;
      }
    }
    {if (true) return token.image;}
    throw new Error("Missing return statement in function");
  }

/**
	 * reconoce una variable
	 * @return el valor string correspondiente al valor reconocido
	 */
  final public String var() throws ParseException, Error {
  Token token;
    label_2:
    while (true) {
      token = jj_consume_token(WORD);
      if (jj_2_31(3)) {
        ;
      } else {
        break label_2;
      }
    }
    {if (true) return token.image;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_3_17() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(BALLOONS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) return true;
    }
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_7() {
    if (jj_3R_13()) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_3R_13()) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(CHIPS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) return true;
    }
    return false;
  }

  private boolean jj_3R_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) return true;
    }
    return false;
  }

  private boolean jj_3R_4() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(0)) return true;
    return false;
  }

  private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3_29()) return true;
    }
    return false;
  }

  private boolean jj_3_28() {
    if (jj_3R_12()) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(32)) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_scan_token(WORD)) return true;
    return false;
  }

  private boolean jj_3R_13() {
    Token xsp;
    if (jj_3_31()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_31()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(SK)) return true;
    return false;
  }

  private boolean jj_3R_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) return true;
    }
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(MOVE_DIR)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(FACE)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(MOVE_FACE)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(DEFVAR)) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(PICK)) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(PUT)) return true;
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(TURN)) return true;
    if (jj_3R_4()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(MOVE)) return true;
    if (jj_3R_3()) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_30() {
    if (jj_scan_token(CONSTANT)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    Token xsp;
    if (jj_3_30()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_30()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(BALLOONS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) return true;
    }
    return false;
  }

  private boolean jj_3_21() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_scan_token(CHIPS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) return true;
    }
    return false;
  }

  private boolean jj_3R_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) return true;
    }
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_scan_token(33)) return true;
    if (jj_3R_13()) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(NUMERO)) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_3R_12()) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public RobotTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[31];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Robot(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Robot(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RobotTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Robot(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RobotTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Robot(RobotTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(RobotTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[34];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 34; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 31; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
