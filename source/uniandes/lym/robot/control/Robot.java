/* Generated By:JavaCC: Do not edit this line. Robot.java */
package uniandes.lym.robot.control;
import uniandes.lym.robot.kernel.*;
import java.awt.Point;
import java.io.*;
import java.util.*;
@ SuppressWarnings("serial")
public class Robot implements RobotConstants {
  /* HASHMAP */
  Map < String, Integer > variables = new HashMap < String, Integer > ();
  Map < String, Integer > directions = Map.of(":right", 1, ":around", 2, ":left", - 1);
  Map < String, Integer > dire = Map.of(":right", 1, ":left", - 1, ":front", 0, ":back", 2);
  Map < String, Integer > orientations = Map.of(":north", 0, ":east", 1, ":south", 2, ":west", 3);
  Map < Integer, Integer > turns = Map.of(0, 0, 1, 2, 2, 1, 3, 3);


  private RobotWorldDec world;

  void setWorld(RobotWorld w)
  {
    world = (RobotWorldDec) w;
  }
  String salida = new String();

// (turn :right) (move 2) (move 3)
  final public boolean command(StringBuffer sistema) throws ParseException {
  salida = new String();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MOVE:
        jj_consume_token(MOVE);
        move();
        break;
      case TURN:
        jj_consume_token(TURN);
        turn();
        break;
      case PUT:
        jj_consume_token(PUT);
        putItem();
        break;
      case PICK:
        jj_consume_token(PICK);
        pickItem();
        break;
      case DEFVAR:
        jj_consume_token(DEFVAR);
        variable();
        break;
      case 33:
        assing();
        break;
      case MOVE_FACE:
        jj_consume_token(MOVE_FACE);
        moveface();
        break;
      case FACE:
        jj_consume_token(FACE);
        face();
        break;
      case FACING_P:
      case CM:
        conditions();
        break;
      case MOVE_DIR:
        jj_consume_token(MOVE_DIR);
        movedir();
        break;
      case RUN_DIRS:
        jj_consume_token(RUN_DIRS);
        rundirs();
        break;
      case SK:
        jj_consume_token(SK);
        break;
      case NOT:
        jj_consume_token(NOT);
        jj_consume_token(LPAREN);
        not();
        jj_consume_token(LPAREN);
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(RPAREN);
    sistema.append(salida);
    {if (true) return true;}
      break;
    case 32:
      jj_consume_token(32);
    {if (true) return true;}
      break;
    case 0:
      jj_consume_token(0);
    {if (true) return false;}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// COMANDS
  final public void putItem() throws ParseException {
  int f = 1;
  String v;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHIPS:
      jj_consume_token(CHIPS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMERO:
        f = numero();
        world.putChips(f);
        break;
      case WORD:
        v = var();
        world.putChips(variables.get(v));
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case BALLOONS:
      jj_consume_token(BALLOONS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMERO:
        f = numero();
        world.putBalloons(f);
        break;
      case WORD:
        v = var();
        world.putBalloons(variables.get(v));
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void pickItem() throws ParseException {
  int f = 1;
  String v;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHIPS:
      jj_consume_token(CHIPS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMERO:
        f = numero();
        world.pickChips(f);
        break;
      case WORD:
        v = var();
        world.pickChips(variables.get(v));
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case BALLOONS:
      jj_consume_token(BALLOONS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMERO:
        f = numero();
        world.grabBalloons(f);
        break;
      case WORD:
        v = var();
        world.grabBalloons(variables.get(v));
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void move() throws ParseException {
  int x = 1;
  String v;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMERO:
      x = numero();
      world.moveForward(x);
      salida = "Command: Moveforward ";
      break;
    case WORD:
      v = var();
      world.moveForward(variables.get(v));
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void turn() throws ParseException {
  String c;
    c = constant();
    if (directions.containsKey(c))
    {
      int giros = directions.get(c);
      int giro = 1;
      if (giros < 0)
      {
        giro = Math.floorMod(giros, 4);
      }
      else if (giros > 1)
      {
        giro = giros;
      }
      for (int i = 1; i <= giro; i++)
      {
        world.turnRight();
      }
      salida = "The robot has turned " + c;
    }
    else
    {
      {if (true) throw new Error("The direction doesn't exist");}
    }
  }

  final public void movedir() throws ParseException {
  String d;
  String v;
  int n = 1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMERO:
      n = numero();
      d = constant();
        if (dire.containsKey(d))
        {
          int giros = dire.get(d);
          if (giros < 0)
          {
            for (int i = 1; i <= Math.floorMod(giros, 4); i++)
            {
              world.turnRight();
            }
            world.moveForward(n);
          }
          else if (giros > 1)
          {
            for (int i = 1; i <= giros; i++)
            {
              world.turnRight();
            }
            world.moveForward(n);
          }
          else if (giros == 0)
          {
            world.moveForward(n);
          }
          else if (giros == 1)
          {
            world.turnRight();
            world.moveForward(n);
          }
          salida = "The robot has turned " + d;
        }
        else
        {
          {if (true) throw new Error("The direction doesn't exist");}
        }
        switch (d)
        {
          case ":back" :
          for (int i = 1; i <= 2; i++)
          {
            world.turnRight();
          }
          break;
          case ":front" :
          salida = "Quedate quieto wey";
          break;
          case ":right" :
          for (int i = 1; i <= 3; i++)
          {
            world.turnRight();
          }
          break;
          case ":left" :
          for (int i = 1; i <= 1; i++)
          {
            world.turnRight();
          }
          break;
        }
      break;
    case WORD:
      v = var();
      d = constant();
      if (dire.containsKey(d))
      {
        int giros = dire.get(d);
        if (giros < 0)
        {
          for (int i = 1; i <= Math.floorMod(giros, 4); i++)
          {
            world.turnRight();
          }
          world.moveForward(variables.get(v));
        }
        else if (giros > 1)
        {
          for (int i = 1; i <= giros; i++)
          {
            world.turnRight();
          }
          world.moveForward(variables.get(v));
        }
        else if (giros == 0)
        {
          world.moveForward(variables.get(v));
        }
        else if (giros == 1)
        {
          world.turnRight();
          world.moveForward(variables.get(v));
        }
        salida = "The robot has turned " + d;
      }
      else
      {
        {if (true) throw new Error("The direction doesn't exist");}
      }
      switch (d)
      {
        case ":back" :
        for (int i = 1; i <= 2; i++)
        {
          world.turnRight();
        }
        break;
        case ":front" :
        salida = "Quedate quieto wey";
        break;
        case ":right" :
        for (int i = 1; i <= 3; i++)
        {
          world.turnRight();
        }
        break;
        case ":left" :
        for (int i = 1; i <= 1; i++)
        {
          world.turnRight();
        }
        break;
      }
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void rundirs() throws ParseException {
  String o;
  ArrayList < String > ldire = new ArrayList < String > ();
    label_1:
    while (true) {
      o = constant();
      ldire.add(o);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONSTANT:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_1;
      }
    }
    int inicio = world.getFacing();
    int llegada = 0;
    for (String key : ldire)
    {
      if (dire.containsKey(key))
      {
        int giros = dire.get(key);
        if (giros < 0)
        {
          for (int i = 1; i <= Math.floorMod(giros, 4); i++)
          {
            world.turnRight();
          }
          world.moveForward(1);
        }
        else if (giros > 1)
        {
          for (int i = 1; i <= giros; i++)
          {
            world.turnRight();
          }
          world.moveForward(1);
        }
        else if (giros == 0)
        {
          world.moveForward(1);
        }
        else if (giros == 1)
        {
          world.turnRight();
          world.moveForward(1);
        }
        else
        {
          {if (true) throw new Error("The direction doesn't exist");}
        }
      }
    }
    llegada = turns.get(world.getFacing());
    inicio = turns.get(inicio);
    int nuevaOrientacion = inicio - llegada;
    int giros = Math.floorMod(nuevaOrientacion, 4);
    for (int i = 1; i <= giros; i++)
    {
      world.turnRight();
    }
    System.out.println("giros" + giros);
  }

  final public Map < String, Integer > variable() throws ParseException {
  String name;
  int n = 1;
    name = var();
    n = numero();
      if (variables.containsKey(name))
      {
        salida = "The variable alredy exists, use assing instead!";
      }
      else
      {
        variables.put(name, n);
      }
      {if (true) return variables;}
    throw new Error("Missing return statement in function");
  }

  final public void assing() throws ParseException {
  String name;
  int n;
    jj_consume_token(33);
    name = var();
    n = numero();
    if (variables.containsKey(name))
    {
      variables.replace(name, n);
      salida = "The value of " + name + " has been changed!";
      for (String key : variables.keySet())
      {
        System.out.println("Key: " + key + " Value: " + variables.get(key) + "\u005cn");
      }
    }
    else
    {
      salida = "There is no a variable with such name!";
    }
  }

  final public void face() throws ParseException {
  String o;
  String v;
  int x = 1;
    o = constant();
      int inicio = world.getFacing();
      inicio = turns.get(inicio);
      int llegada = orientations.get(o);
      int nuevaOrientacion = llegada - inicio;
      int giros = Math.floorMod(nuevaOrientacion, 4);
      for (int i = 1; i <= giros; i++)
      {
        world.turnRight();
      }
  }

  final public void moveface() throws ParseException {
  String o;
  String v;
  int x = 1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMERO:
      x = numero();
      o = constant();
      int inicio = world.getFacing();
      inicio = turns.get(inicio);
      int llegada = orientations.get(o);
      int nuevaOrientacion = llegada - inicio;
      int giros = Math.floorMod(nuevaOrientacion, 4);
      for (int i = 1; i <= giros; i++)
      {
        world.turnRight();
      }
      world.moveForward(x);
      break;
    case WORD:
      v = var();
      o = constant();
      int inicio1 = world.getFacing();
      inicio1 = turns.get(inicio1);
      int llegada1 = orientations.get(o);
      int nuevaOrientacion1 = llegada1 - inicio1;
      int giros1 = Math.floorMod(nuevaOrientacion1, 4);
      for (int i = 1; i <= giros1; i++)
      {
        world.turnRight();
      }
      world.moveForward(variables.get(v));
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public boolean conditions() throws ParseException {
  String o;
  String v;
  int n = 1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FACING_P:
      jj_consume_token(FACING_P);
      o = constant();
      if (orientations.containsKey(o))
      {
        switch (o)
        {
          case ":north" :
          {if (true) return world.facingNorth();}
          case ":south" :
          {if (true) return world.facingSouth();}
          case ":east" :
          {if (true) return world.facingEast();}
          case "west" :
          {if (true) return world.facingWest();}
        }
      }
      break;
    case CM:
      jj_consume_token(CM);
      o = constant();
      Point actualPosition = world.getPosition().getLocation();
      int size = world.getN();
      int newx = 1;
      switch (o)
      {
        case ":north" :
        actualPosition.translate(0, - 1);

        newx = actualPosition.y;
        if (newx > size
      | newx < 1)
        {

          {if (true) return false;}
        }
        else
        {

          {if (true) return !world.isBlocked(actualPosition);}
        }
        case ":south" :
        actualPosition.translate(0, 1);

        newx = actualPosition.y;
        if (newx > size
      | newx < 1)
        {

          {if (true) return false;}
        }
        else
        {

          {if (true) return !world.isBlocked(actualPosition);}
        }
        case ":east" :
        actualPosition.translate(1, 0);

        newx = actualPosition.x;
        if (newx > size
      | newx < 1)
        {

          {if (true) return false;}
        }
        else
        {

          {if (true) return !world.isBlocked(actualPosition);}
        }
        case ":west" :
        actualPosition.translate(- 1, 0);

        newx = actualPosition.x;
        if (newx > size
      | newx < 1)
        {

          {if (true) return false;}
        }
        else
        {

          {if (true) return !world.isBlocked(actualPosition);}
        }
      }
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  boolean not() throws ParseException {
  return !conditions();
  }

  final public int numero() throws ParseException, Error {
  int total = 1;
    jj_consume_token(NUMERO);
    try
    {
      total = Integer.parseInt(token.image);
    }
    catch (NumberFormatException ee)
    {
      // Dada la forma de NUMERO, sabemos que solo puede tener d�gitos
      // Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
      {if (true) throw new Error("Number out of bounds: " + token.image + "!!");}
    }
    {if (true) return total;}
    throw new Error("Missing return statement in function");
  }

/**
	 * reconoce una constante
	 * @return el valor string correspondiente al valor reconocido
	 */
  final public String constant() throws ParseException, Error {
  Token token;
    token = jj_consume_token(CONSTANT);
    {if (true) return token.image;}
    throw new Error("Missing return statement in function");
  }

/**
	 * reconoce una variable
	 * @return el valor string correspondiente al valor reconocido
	 */
  final public String var() throws ParseException, Error {
  Token token;
    token = jj_consume_token(WORD);
    {if (true) return token.image;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public RobotTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[13];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x190ffc0,0x11,0x88000000,0x88000000,0x6000000,0x88000000,0x88000000,0x6000000,0x88000000,0x88000000,0x40000000,0x88000000,0x900000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x2,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public Robot(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Robot(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RobotTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Robot(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RobotTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Robot(RobotTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(RobotTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[34];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 13; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 34; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
